#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 s_vTexCoord;

out vec3 LightIntensity;
out vec3 position_eye, normal_eye;
out vec4 fragment_colour; // final colour of surface
out vec2 texCoord;
out float visibility;

vec4 LightPosition = vec4 (10.0, 10.0, 4.0, 1.0); // Light position in world coords.
vec3 Kd = vec3 (0.0, 0.8, 0.0); // green diffuse surface reflectance
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

const float density = 0.01f;
const float gradient = 5.0f;

void main(){

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);

  // Convert normal and position to eye coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);
  
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  
  //////////////////// LIGHTING	/////////////
  //normalised vector towards the light source
  vec3 s = normalize(vec3(LightPosition - eyeCoords));

  //new
  position_eye = vec3 (view * model * vec4(vertex_position, 1.0));
  normal_eye = vec3 (view * model * vec4(vertex_normal, 0.0));
  gl_Position = proj * vec4(position_eye, 1.0);
  //end new
  
  // The diffuse shading equation, dot product gives us the cosine of angle between the vectors
  LightIntensity = Ld * Kd * max( dot( s, tnorm ), 0.0 );
  
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);

  //setting parameters
  vec3 light_position_world = vec3 (0.0, 50.0, 20.0);
  vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
  vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
  vec3 La = vec3 (0.2, 0.4, 0.6); // grey ambient colour

  // surface reflectance
  vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
  vec3 Kd = vec3 (1.0, 0.5, 0.0); // orange diffuse surface reflectance
  vec3 Ka = vec3 (1.0, 1.0, 1.0); // fully reflect ambient light
  float specular_exponent = 100.0; // specular 'power'

  // ambient intensity
  vec3 Ia = La * Ka;

  // diffuse intensity
  // raise light to eye space
  vec3 light_position_eye = vec3(view * vec4(light_position_world, 1.0));
  vec3 L = normalize(light_position_eye - position_eye);
  float dot_prod = max(dot(L,normal_eye), 0.0);
  vec3 Id = Ld * Kd * dot_prod;
  
  // specular intensity
  vec3 R = reflect(-L, normal_eye);
  vec3 V = normalize(-position_eye);
  float dot_prod_specular = max(dot(R,V), 0.0);
  float specular_factor = pow(dot_prod_specular, specular_exponent);
  vec3 Is = Ls * Ks * specular_factor;

  ////////// END LIGHTING  ///////

  /////////// FOG ///////////
  //vec4 fog_worldPosition = model * vec4(vertex_position,1.0);
  //vec4 positionRelativetoCam = view * fog_worldPosition;
  vec4 fog_worldPosition = model * vec4(position_eye, 1.0);
  vec4 positionRelativetoCam = view * model * vec4(vertex_position,1.0);
  float distance = length(positionRelativetoCam.xyz);
  visibility = exp(-pow((distance*density),gradient));
  visibility = clamp(visibility,0.0,1.0);

  texCoord = s_vTexCoord;
  // final colour
  fragment_colour = vec4 (Is + Id + Ia, 1.0);

}


  